{
  "scopeName": "source.jspp",
  "name": "JS++",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#operators" },
    { "include": "#newExpressions" },
    { "include": "#functions" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.jspp",
          "match": "//.*$"
        },
        {
          "name": "comment.block.jspp",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.jspp",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.jspp",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.jspp",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.jspp",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.jspp",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.jspp",
          "match": "\\b(if|else|for|while|do|switch|case|default|break|continue|return|throw|try|catch|finally|new|this|super|import|package|class|interface|extends|implements|public|private|protected|static|final|abstract|synchronized|volatile|transient|native|const|goto|enum|assert|instanceof|typeof|void|delete|in|of|with|yield|await|function|var|let|const)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.jspp",
          "match": "\\b(int|long|short|byte|float|double|boolean|char|void|number|string|boolean|object|any|undefined|null)\\b"
        },
        {
          "name": "entity.name.type.class.jspp",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.jspp",
          "match": "\\+\\+|--|==|!=|===|!==|<=|>=|<<|>>|>>>|&&|\\|\\||\\+|-|\\*|/|%|=|<|>|!|~|&|\\||\\^|\\?|:"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.jspp",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        }
      ]
    }
  }
}
